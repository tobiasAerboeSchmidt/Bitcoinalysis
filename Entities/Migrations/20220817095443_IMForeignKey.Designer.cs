// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220817095443_IMForeignKey")]
    partial class IMForeignKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Block", b =>
                {
                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Hash");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Hash = "coinbase",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Transaction", b =>
                {
                    b.Property<string>("TnxHash")
                        .HasColumnType("text");

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TnxHash");

                    b.HasIndex("BlockHash");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TnxHash = "coinbase",
                            BlockHash = "coinbase"
                        });
                });

            modelBuilder.Entity("Entities.TransactionInput", b =>
                {
                    b.Property<string>("TnxHash")
                        .HasColumnType("text");

                    b.Property<string>("OutputTnx")
                        .HasColumnType("text");

                    b.Property<int>("OutputIndex")
                        .HasColumnType("integer");

                    b.Property<string>("InputWallet")
                        .HasColumnType("text");

                    b.HasKey("TnxHash", "OutputTnx", "OutputIndex");

                    b.HasIndex("InputWallet");

                    b.ToTable("TransactionInputs");
                });

            modelBuilder.Entity("Entities.TransactionOutput", b =>
                {
                    b.Property<string>("TnxHash")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("OutputWallet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("TnxHash", "Index");

                    b.HasIndex("OutputWallet");

                    b.ToTable("TransactionOutputs");

                    b.HasData(
                        new
                        {
                            TnxHash = "coinbase",
                            Index = -1,
                            OutputWallet = "coinbase",
                            Value = 0L
                        });
                });

            modelBuilder.Entity("Entities.Wallet", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.HasKey("Address");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Address = "coinbase"
                        });
                });

            modelBuilder.Entity("Entities.Transaction", b =>
                {
                    b.HasOne("Entities.Block", null)
                        .WithMany("Transactions")
                        .HasForeignKey("BlockHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Block", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
